import re
import contextlib

from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class KeywordMod(loader.Module):
    """Allows you to create custom filters with regexes, commands and unlimited funcionality"""

    strings = {
        "name": "Keyword",
        "args": "üö´ <b>Args are incorrect</b>",
        "kw_404": 'üö´ <b>Keyword "{}" not found</b>',
        "kw_added": "‚úÖ <b>New keyword:\nTrigger: {}\nMessage: {}\n{}{}{}{}{}</b>",
        "kw_removed": '‚úÖ <b>Keyword "{}" removed</b>',
        "kwbl_list": " <b>Blacklisted chats:</b>\n{}",
        "bl_added": "‚úÖ <b>This chat is now blacklisted for Keywords</b>",
        "bl_removed": "‚úÖ <b>This chat is now whitelisted for Keywords</b>",
        "sent": " <b>[Keywords]: Sent message to {}, triggered by {}:\n{}</b>",
        "kwords": " <b>Current keywords:\n</b>{}",
        "no_command": (
            "üö´ <b>Execution of command forbidden, because message contains reply</b>"
        ),
    }

    strings_ru = {
        "args": "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "kw_404": 'üö´ <b>–ö–µ–π–≤–æ—Ä–¥ "{}" –Ω–µ –Ω–∞–π–¥–µ–Ω</b>',
        "kw_added": "‚úÖ <b>–ù–æ–≤—ã–π –∫–µ–π–≤–æ—Ä–¥:\n–¢—Ä–∏–≥–≥–µ—Ä: {}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {}\n{}{}{}{}{}</b>",
        "kw_removed": '‚úÖ <b>–ö–µ–π–≤–æ—Ä–¥ "{}" —É–¥–∞–ª–µ–Ω</b>',
        "kwbl_list": " <b>–ß–∞—Ç—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:</b>\n{}",
        "bl_added": "‚úÖ <b>–≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ö–µ–π–≤–æ—Ä–¥–æ–≤</b>",
        "bl_removed": "‚úÖ <b>–≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ö–µ–π–≤–æ—Ä–¥–æ–≤</b>",
        "sent": " <b>[–ö–µ–π–≤–æ—Ä–¥—ã]: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {}, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {}:\n{}</b>",
        "kwords": " <b>–¢–µ–∫—É—â–∏–µ –∫–µ–π–≤–æ—Ä–¥—ã:\n</b>{}",
        "no_command": (
            "üö´ <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ø–ª–∞–π</b>"
        ),
        "_cmd_doc_kword": (
            "<–∫–µ–π–≤–æ—Ä–¥ | –º–æ–∂–Ω–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö | & –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤"
            " —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ> <—Å–æ–æ–±—â–µ–Ω–∏–µ | –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            " –∫–µ–π–≤–æ—Ä–¥–∞> [-r –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è] [-m –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è]"
            " [-l –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è] [-e –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π]"
        ),
        "_cmd_doc_kwords": "–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–µ–π–≤–æ—Ä–¥—ã",
        "_cmd_doc_kwbl": "–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–µ–π–≤–æ—Ä–¥–æ–≤",
        "_cmd_doc_kwbllist": "–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
        "_cls_doc": "–°–æ–∑–¥–∞–≤–∞–π –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–µ–π–≤–æ—Ä–¥—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏",
    }

    async def client_ready(self, client, db):
        self.keywords = self.get("keywords", {})
        self.bl = self.get("bl", [])

    async def kwordcmd(self, message: Message):
        """<keyword | could be in quotes | & for multiple words that should be in msg> <message | empty to remove keyword> [-r for full match] [-m for autoreading msg] [-l to log in pm] [-e for regular expressions]"""
        args = utils.get_args_raw(message)
        kw, ph, restrict, ar, l, e, c = "", "", False, False, False, False, False
        if "-r" in args:
            restrict = True
            args = args.replace(" -r", "").replace("-r", "")

        if "-m" in args:
            ar = True
            args = args.replace(" -m", "").replace("-m", "")

        if "-l" in args:
            l = True  # noqa: E741
            args = args.replace(" -l", "").replace("-l", "")

        if "-e" in args:
            e = True
            args = args.replace(" -e", "").replace("-e", "")

        if "-c" in args:
            c = True
            args = args.replace(" -c", "").replace("-c", "")

        if args[0] == "'":
            kw = args[1 : args.find("'", 1)]
            args = args[args.find("'", 1) + 1 :]
        elif args[0] == '"':
            kw = args[1 : args.find('"', 1)]
            args = args[args.find('"', 1) + 1 :]
        else:
            kw = args.split()[0]
            try:
                args = args.split(maxsplit=1)[1]
            except Exception:
                args = ""

        if ph := args:
            ph = ph.strip()
            kw = kw.strip()
            self.keywords[kw] = [f"{ph}", restrict, ar, l, e, c]
            self.set("keywords", self.keywords)
            return await utils.answer(
                message,
                self.strings("kw_added").format(
                    kw,
                    utils.escape_html(ph),
                    ("Restrict: yes\n" if restrict else ""),
                    ("Auto-read: yes\n" if ar else ""),
                    ("Log: yes" if l else ""),
                    ("Regex: yes" if e else ""),
                    ("Command: yes" if c else ""),
                ),
            )
        else:
            if kw not in self.keywords:
                return await utils.answer(message, self.strings("kw_404").format(kw))

            del self.keywords[kw]

            self.set("keywords", self.keywords)
            return await utils.answer(message, 
self.strings("kw_removed").format(kw))

    async def kwordscmd(self, message: Message):
        """List current kwords"""
        res = ""
        for kw, ph in self.keywords.items():
            res += (
                "<code>"
                + kw
                + "</code>\n<b>Message: "
                + utils.escape_html(ph[0])
                + "\n"
                + ("Restrict: yes\n" if ph[1] else "")
                + ("Auto-read: yes\n" if ph[2] else "")
                + ("Log: yes" if ph[3] else "")
                + ("Regex: yes" if len(ph) > 4 and ph[4] else "")
                + ("Command: yes" if len(ph) > 5 and ph[5] else "")
                + "</b>"
            )
            if res[-1] != "\n":
                res += "\n"

            res += "\n"

        await utils.answer(message, 
self.strings("kwords").format(res))

    @loader.group_admin_ban_users
    async def kwblcmd(self, message: Message):
        """Blacklist chat from answering keywords"""
        cid = utils.get_chat_id(message)
        if cid not in self.bl:
            self.bl.append(cid)
            self.set("bl", self.bl)
            return await utils.answer(message, self.strings("bl_added"))
        else:
            self.bl.remove(cid)
            self.set("bl", self.bl)
            return await utils.answer(message, self.strings("bl_removed"))

    async def kwbllistcmd(self, message: Message):
        """List blacklisted chats"""
        chat = str(utils.get_chat_id(message))
        res = ""
        for user in self.bl:
            try:
                u = await self._client.get_entity(user)
            except Exception:
                self.chats[chat]["defense"].remove(user)
                continue

            tit = (
                u.first_name if getattr(u, "first_name", None) is not None else u.title
            )
            res += (
                "  üë∫ <a"
                f" href=\"tg://user?id={u.id}\">{tit}{(' ' + u.last_name) if getattr(u, 'last_name', None) is not None else ''}</a>\n"
            )

        if not res:
            res = "<i>No</i>"

        return await utils.answer(message, self.strings("kwbl_list").format(res))

    async def watcher(self, message: Message):
        with contextlib.suppress(Exception):
            cid = utils.get_chat_id(message)
            if cid in self.bl:
                return

            for kw, ph in self.keywords.copy().items():
                if len(ph) > 4 and ph[4]:
                    try:
                        if not re.match(kw, message.raw_text):
                            continue
                    except Exception:
                        continue
                else:
                    kws = [
                        _.strip() for _ in ([kw] if "&" not in kw else kw.split("&"))
                    ]
                    trigger = False
                    for k in kws:
                        if k.lower() in message.text.lower():
                            trigger = True
                            if not ph[1]:
                                break
                        elif k.lower() not in message.text.lower() and ph[1]:
                            trigger = False
                            break

                    if not trigger:
                        continue

                offset = 2

                if (
                    len(ph) > 5
                    and ph[5]
                    and ph[0][offset:].startswith(self.get_prefix())
                ):
                    offset += 1

                if ph[2]:
                    await self._client.send_read_acknowledge(cid, clear_mentions=True)

                if ph[3]:
                    chat = await message.get_chat()
                    ch = (
                        message.first_name
                        if getattr(message, "first_name", None) is not None
                        else ""
                    )
                    if not ch:
                        ch = (
                            chat.title
                            if getattr(message, "title", None) is not None
                            else ""
                        )
                    await self._client.send_message(
                        "me", self.strings("sent").format(ch, kw, ph[0])
                    )

                if not message.reply_to_msg_id:
                    ms = await utils.answer(message, ph[0])
                else:
                    ms = await message.respond(ph[0])

                ms.text = ph[0][2:]

                if len(ph) > 5 and ph[5]:
                    if ph[0][offset:].split()[0] == "del":
                        await message.delete()
                        await ms.delete()
                    elif not message.reply_to_msg_id:
                        cmd = ph[0][offset:].split()[0]
                        if cmd in self.allmodules.commands:
                            await self.allmodules.commands[cmd](ms)
                    else:
                        await ms.respond(self.strings("no_command"))
